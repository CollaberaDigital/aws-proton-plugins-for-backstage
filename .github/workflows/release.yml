name: Release Plugins

on:
  workflow_dispatch:
    inputs:
      deploymentApproval:
        description: "Are the team pipelines' time windows and alarm blockers open?"
        type: boolean
        required: true
      manualTestsCompleted:
        description: "Have you manually tested the latest plugin code in a local Backstage app by following the tutorial?"
        type: boolean
        required: true

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Confirm deployment is approved
        if: ${{ !inputs.deploymentApproval }}
        run: |
          echo Please confirm that time windows and alarm blockers are open before releasing!
          exit 1
      - name: Confirm manual tests are completed
        if: ${{ !inputs.manualTestsCompleted }}
        run: |
          echo Please complete manual tests before releasing!
          exit 1
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Configure git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Check for new commits to release
        run: |
          CURRENT_VERSION=$(cat lerna.json | jq -r '.version')
          COMMITS_TO_RELEASE=$(git log --pretty=oneline v$CURRENT_VERSION..HEAD | wc -l)

          echo Current version: v$CURRENT_VERSION
          echo Commits to release: $COMMITS_TO_RELEASE

          echo "CURRENT_VERSION=${CURRENT_VERSION}" >> $GITHUB_ENV
          echo "COMMITS_TO_RELEASE=${COMMITS_TO_RELEASE}" >> $GITHUB_ENV

      - name: Check if no release needed
        if: ${{ env.COMMITS_TO_RELEASE == 0 }}
        run: |
          echo No changes to release!
          echo Current release: $CURRENT_VERSION

      - name: Test latest changes
        if: ${{ env.COMMITS_TO_RELEASE != 0 }}
        run: |
          yarn install
          yarn ci
        env:
          CI: true

      - name: Publish new version to GitHub
        if: ${{ env.COMMITS_TO_RELEASE != 0 }}
        run: |
          yarn bump-version

          NEW_VERSION=$(cat lerna.json | jq -r '.version')
          RELEASE_COMMIT_ID=$(git rev-parse HEAD)

          echo "NEW_VERSION=${NEW_VERSION}" >> $GITHUB_ENV
          echo "RELEASE_COMMIT_ID=${RELEASE_COMMIT_ID}" >> $GITHUB_ENV
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Check if version was bumped
        # This can happen when all the new commits were outside of the plugin directories,
        # so lerna does not bump the version number.
        if: ${{ env.COMMITS_TO_RELEASE != 0 && env.NEW_VERSION == env.CURRENT_VERSION }}
        run: |
          echo No changes to release!
          echo Current release: $CURRENT_VERSION

      - name: 'Show new version details'
        if: ${{ env.COMMITS_TO_RELEASE != 0 && env.NEW_VERSION != env.CURRENT_VERSION }}
        shell: bash
        run: |
          echo New version: v$NEW_VERSION
          echo Commit ID: $RELEASE_COMMIT_ID
          echo Previous version: v$CURRENT_VERSION
          echo Changes released:
          git log --pretty=oneline v$CURRENT_VERSION..v$NEW_VERSION

      - name: 'Update GitHub release notes'
        if: ${{ env.COMMITS_TO_RELEASE != 0 && env.NEW_VERSION != env.CURRENT_VERSION }}
        shell: bash
        run: |
          BACKSTAGE_VERSION=$(cat backstage.json | jq -r '.version')
          gh release view v$NEW_VERSION --json body -q ".body" > release-notes.txt
          echo -e "### Backstage Version\n\nThis release was built on Backstage version $BACKSTAGE_VERSION." >> release-notes.txt
          gh release edit v$NEW_VERSION --notes-file release-notes.txt
          rm release-notes.txt
        env:
          GH_TOKEN: ${{ github.token }}

      - name: 'Login to NPM registry'
        if: ${{ env.COMMITS_TO_RELEASE != 0 && env.NEW_VERSION != env.CURRENT_VERSION }}
        shell: bash
        run: |
          echo "//registry.npmjs.org/:_authToken=${{secrets.NPM_AUTH_TOKEN}}" >> .npmrc
          echo "always-auth = true" >> .npmrc

      - name: Publish new version to NPM registry
        if: ${{ env.COMMITS_TO_RELEASE != 0 && env.NEW_VERSION != env.CURRENT_VERSION }}
        run: |
          yarn publish-version
